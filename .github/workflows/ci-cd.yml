#name: Full CI/CD with Docker Compose (Gradle & Angular)
#
#on:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]
#
#jobs:
#  build-and-deploy:
#    runs-on: ubuntu-latest
#    services:
#      db:
#        image: postgres:15
#        ports:
#          - 5432:5432
#        env:
#          POSTGRES_USER: test
#          POSTGRES_PASSWORD: test
#          POSTGRES_DB: testdb
#        options: >-
#          --health-cmd "pg_isready -U test"
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#
#    steps:
#      # ---------------- Checkout ----------------
#      - name: Checkout repository
#        uses: actions/checkout@v3
#        with:
#          submodules: recursive
#
#      # ---------------- Set up JDK 24 ----------------
#      - name: Set up JDK 24
#        uses: oracle-actions/setup-java@v1.4.0
#        with:
#          release: '24'
#
#      - name: Check Postgres
#        run: |
#          sudo apt-get update && sudo apt-get install -y postgresql-client
#          for i in {1..20}; do
#            psql -h localhost -U test -d testdb -c '\l' && break
#            echo "Postgres not ready yet..."
#            sleep 5
#          done
#
#      # ---------------- Backend (Gradle) ----------------
#      - name: Build Backend
#        working-directory: backend
#        run: ./gradlew clean build --no-daemon
#
#      # ---------------- Frontend (Angular) ----------------
#      - name: Set up Node.js 20
#        uses: actions/setup-node@v3
#        with:
#          node-version: 20
#
#      - name: Install Frontend Dependencies
#        working-directory: frontend
#        run: npm ci
#
#      - name: Run Frontend Tests
#        working-directory: frontend
#        run: npm test -- --watch=false --browsers=ChromeHeadless
#
#      - name: Build Angular App
#        working-directory: frontend
#        run: npm run build -- --prod
#
#      # ---------------- Docker Compose ----------------
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Build and Start Services
#        run: |
#          docker-compose -f docker-compose.yml build
#          docker-compose -f docker-compose.yml up -d
#
#      # ---------------- Optional: Integration Tests ----------------
#      - name: Run Integration Tests
#        run: |
#          echo "Run integration tests here against the running services"
#
#      # ---------------- Tear Down ----------------
#      - name: Tear Down Docker Compose
#        if: always()
#        run: docker-compose down


name: Java Spring Boot CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: gradle

      - name: Check PostgreSQL Connection and Schema
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          export PGPASSWORD=testpass
          for i in {1..20}; do
            psql -h postgres -U testuser -d testdb -c '\dt' && break
            echo "Postgres not ready yet..."

      - name: Build Backend
        working-directory: backend
        run: ./gradlew clean build -Dspring.profiles.active=test